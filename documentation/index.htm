<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/TheWeepingHouse/ConfigurationTMJLoader.q.yml">quintessence/TheWeepingHouse/ConfigurationTMJLoader.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/ConfigurationTMJLoaderElements/Object.q.yml">quintessence/TheWeepingHouse/ConfigurationTMJLoaderElements/Object.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/Configurations/Initial.q.yml">quintessence/TheWeepingHouse/Configurations/Initial.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/ConfigurationsBuilder.q.yml">quintessence/TheWeepingHouse/ConfigurationsBuilder.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/EntityFactory.q.yml">quintessence/TheWeepingHouse/EntityFactory.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/FileExistenceChecker.q.yml">quintessence/TheWeepingHouse/FileExistenceChecker.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/Runner.q.yml">quintessence/TheWeepingHouse/Runner.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/Shaders/FlatColor.q.yml">quintessence/TheWeepingHouse/Shaders/FlatColor.q.yml</a></li>
  <li><a href="#quintessence/TheWeepingHouse/Shaders/Multiply.q.yml">quintessence/TheWeepingHouse/Shaders/Multiply.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">tile_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">objects</td>
  <td class="property">std::vector&lt;TheWeepingHouse::ConfigurationTMJLoaderElements::Object&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="method">get_num_columns()</td>
</tr>
<tr>
  <td class="method">get_num_rows()</td>
</tr>
<tr>
  <td class="method">get_tile_width()</td>
</tr>
<tr>
  <td class="method">get_tile_height()</td>
</tr>
<tr>
  <td class="method">get_objects()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::ConfigurationTMJLoaderElements::Object&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/ConfigurationTMJLoaderElements/Object.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">w</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">h</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">script</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">script_name_to_play</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build(AllegroFlare::BitmapBin* bitmap_bin=nullptr, AllegroFlare::FontBin* font_bin=nullptr, AllegroFlare::EventEmitter* event_emitter=nullptr, AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper* entity_collection_helper__this_is_a_hack=nullptr)</td>
</tr>
<tr>
  <td class="method">assemble_room(std::string name=&quot;[unset-name]&quot;, std::string background_bitmap_identifier=&quot;[unset-background_bitmap_identifier]&quot;, std::string observe_script_text=&quot;[unset-background_bitmap_identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">assets_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">entity_collection_helper__this_is_a_hack</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*</td>
</tr>
<tr>
  <td class="property">result_configuration</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Configuration</td>
</tr>
<tr>
  <td class="property">built</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">inventory_index</td>
  <td class="property">AllegroFlare::InventoryIndex&amp;</td>
</tr>
<tr>
  <td class="property">af_inventory</td>
  <td class="property">AllegroFlare::Inventory&amp;</td>
</tr>
<tr>
  <td class="property">flags</td>
  <td class="property">AllegroFlare::Inventory&amp;</td>
</tr>
<tr>
  <td class="property">entity_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*&gt;&amp;</td>
</tr>
<tr>
  <td class="property">room_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*&gt;&amp;</td>
</tr>
<tr>
  <td class="property">entity_room_associations</td>
  <td class="property">std::map&lt;std::string, std::string&gt;&amp;</td>
</tr>
<tr>
  <td class="property">script_dictionary</td>
  <td class="property">std::map&lt;std::string, AllegroFlare::Prototypes::FixedRoom2D::Script&gt;&amp;</td>
</tr>
<tr>
  <td class="property">starting_in_room_identifier</td>
  <td class="property">std::string&amp;</td>
</tr>
<tr>
  <td class="property">room_factory</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::RoomFactory</td>
</tr>
<tr>
  <td class="property">entity_factory</td>
  <td class="property">TheWeepingHouse::EntityFactory</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_room_name(float x=0, float y=0)</td>
</tr>
<tr>
  <td class="method">build_from_tmj_source(std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
<tr>
  <td class="method">you_build()</td>
</tr>
<tr>
  <td class="method">__you_build()</td>
</tr>
<tr>
  <td class="method">get_result_configuration()</td>
</tr>
<tr>
  <td class="method">set_start_room(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">build()</td>
</tr>
<tr>
  <td class="method">add_hitspot_to_room(std::string room_name=&quot;[unset-room_name]&quot;, std::string hitspot_name=&quot;[unset-hitspot_name]&quot;, float x=1920/2, float y=1080/2, float w=100, float h=100, std::string label=&quot;[unset-label]&quot;, std::string interact_script_name=&quot;[unset-interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">add_ellipse_hitspot_to_room(std::string room_name=&quot;[unset-room_name]&quot;, std::string hitspot_name=&quot;[unset-hitspot_name]&quot;, float x=1920/2, float y=1080/2, float w=100, float h=100, std::string label=&quot;[unset-label]&quot;, std::string interact_script_name=&quot;[unset-interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">assemble_room(std::string room_name=&quot;[unset-room_name]&quot;, std::string observe_script_text=&quot;[unset-background_bitmap_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">add_script(std::string script_name=&quot;[unset-script_name]&quot;, std::vector&lt;std::string&gt; script_lines={&quot;[unset-script_lines]&quot;})</td>
</tr>
<tr>
  <td class="method">room_exists(std::string room_name=&quot;[unset-room_name]&quot;)</td>
</tr>
<tr>
  <td class="method">script_exists(std::string script_name=&quot;[unset-script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">entity_exists(std::string entity_name=&quot;[unset-entity_name]&quot;)</td>
</tr>
<tr>
  <td class="method">entity_room_association_exists(std::string entity_name=&quot;[unset-entity_name]&quot;, std::string room_name=&quot;[unset-entity_name]&quot;)</td>
</tr>
<tr>
  <td class="method">set_font_bin(AllegroFlare::FontBin* font_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_bitmap_bin(AllegroFlare::BitmapBin* bitmap_bin=nullptr)</td>
</tr>
<tr>
  <td class="method">set_event_emitter(AllegroFlare::EventEmitter* event_emitter=nullptr)</td>
</tr>
<tr>
  <td class="method">set_assets_folder(std::string assets_folder=&quot;[unset-assets_folder]&quot;)</td>
</tr>
<tr>
  <td class="method">set_entity_collection_helper__this_is_a_hack(AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper* entity_collection_helper__this_is_a_hack=nullptr)</td>
</tr>
<tr>
  <td class="private_method">split(std::string text=&quot;&quot;, char delimiter=&#39; &#39;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::EntityFactory&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/EntityFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::RoomFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::ConfigurationTMJLoader&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/ConfigurationTMJLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Inventory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Inventory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::InventoryIndex&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/InventoryIndex.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Room&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Room.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Script&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Script.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">hitspot_rectangle_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">hitspot_circle_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">hide_hitspots</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_background(std::string bitmap_image_identifier=&quot;[unset-bitmap_identifier]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">create_rectangle_hitspot(float x=1920/2, float y=1080/2, float w=100, float h=100, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">create_ellipse_hitspot(float center_x=1920/2, float center_y=1080/2, float w=100, float h=100, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;)</td>
</tr>
<tr>
  <td class="method">create_entity(std::string bitmap_image_identifier=&quot;[unset-bitmap_identifier]&quot;, float x=1920/2, float y=1080/2, float scale=1.0f, std::string name=&quot;[unset-name]&quot;, std::string on_interact_script_name=&quot;[unset-on_interact_script_name]&quot;, float align_x=0.5f, float align_y=1.0f, bool hidden=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Entities::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">exists()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::exists&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">framework</td>
  <td class="property">AllegroFlare::Frameworks::Full*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">release_info</td>
  <td class="property">ReleaseInfo</td>
</tr>
<tr>
  <td class="property">opening_logos_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">title_screen</td>
  <td class="property">AllegroFlare::Screens::TitleScreen</td>
</tr>
<tr>
  <td class="property">title_screen_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Image</td>
</tr>
<tr>
  <td class="property">pause_screen</td>
  <td class="property">AllegroFlare::Screens::PauseScreen</td>
</tr>
<tr>
  <td class="property">pause_screen_background</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::ScreenCapture</td>
</tr>
<tr>
  <td class="property">new_game_intro_storyboard_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">gameplay_screen</td>
  <td class="property">AllegroFlare::Prototypes::FixedRoom2D::Screen</td>
</tr>
<tr>
  <td class="property">achievements_screen</td>
  <td class="property">AllegroFlare::Screens::Achievements</td>
</tr>
<tr>
  <td class="property">credits_screen</td>
  <td class="property">AllegroFlare::Screens::Storyboard*</td>
</tr>
<tr>
  <td class="property">room_shader_color</td>
  <td class="property">AllegroFlare::Color</td>
</tr>
<tr>
  <td class="property">room_shader</td>
  <td class="property">AllegroFlare::Shaders::Base*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">start_new_game()</td>
</tr>
<tr>
  <td class="method">get_initial_configuration()</td>
</tr>
<tr>
  <td class="method">get_configuration()</td>
</tr>
<tr>
  <td class="method">get_builder_configuration()</td>
</tr>
<tr>
  <td class="method">game_event_func(AllegroFlare::GameEvent* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">run(std::string mode=&quot;production&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::PauseScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/PauseScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::StoryboardFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/StoryboardFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::GameWonScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/GameWonScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::Configurations::Initial&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/Configurations/Initial.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::Configurations::Primary&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/Configurations/Primary.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::Configuration&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::Shaders::FlatColor&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/Shaders/FlatColor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::Shaders::Multiply&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/Shaders/Multiply.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TheWeepingHouse::ConfigurationsBuilder&quot;, &quot;headers&quot;=&gt;[&quot;TheWeepingHouse/ConfigurationsBuilder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Achievements&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Achievements.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Frameworks::Full&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Frameworks/Full.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Storyboard&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Storyboard.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::CharacterNameInput&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/CharacterNameInput.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ReleaseInfo&quot;, &quot;headers&quot;=&gt;[&quot;ReleaseInfo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ScreenCapture&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ScreenCapture.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Image&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Image.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">tint</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">tint_intensity</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="private_method">set_values_to_activated_shader()</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "std/ifstream": [
    "TheWeepingHouse/ConfigurationTMJLoader"
  ],
  "nlohmann/json": [
    "TheWeepingHouse/ConfigurationTMJLoader"
  ],
  "TheWeepingHouse/FileExistenceChecker": [
    "TheWeepingHouse/ConfigurationTMJLoader",
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "TheWeepingHouse/ConfigurationTMJLoaderElements/Object": [
    "TheWeepingHouse/ConfigurationTMJLoader"
  ],
  "TheWeepingHouse/EntityFactory": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/RoomFactory": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Configuration": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/BitmapBin": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/EntityFactory",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "AllegroFlare/EventEmitter": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/Runner",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "AllegroFlare/FontBin": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper": [
    "TheWeepingHouse/Configurations/Initial",
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "TheWeepingHouse/ConfigurationTMJLoader": [
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/Inventory": [
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/InventoryIndex": [
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Entities/Base": [
    "TheWeepingHouse/ConfigurationsBuilder",
    "TheWeepingHouse/EntityFactory"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Room": [
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Script": [
    "TheWeepingHouse/ConfigurationsBuilder"
  ],
  "std/filesystem/exists": [
    "TheWeepingHouse/FileExistenceChecker"
  ],
  "ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/Base": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/TitleScreen": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/PauseScreen": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/Storyboard": [
    "TheWeepingHouse/Runner",
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/StoryboardFactory": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/GameWonScreen": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Prototypes/FixedRoom2D/Screen": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Color": [
    "TheWeepingHouse/Runner",
    "TheWeepingHouse/Runner"
  ],
  "TheWeepingHouse/Configurations/Initial": [
    "TheWeepingHouse/Runner"
  ],
  "TheWeepingHouse/Configurations/Primary": [
    "TheWeepingHouse/Runner"
  ],
  "ALLEGRO_COLOR": [
    "TheWeepingHouse/Runner",
    "TheWeepingHouse/Shaders/FlatColor",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "TheWeepingHouse/Shaders/FlatColor": [
    "TheWeepingHouse/Runner"
  ],
  "TheWeepingHouse/Shaders/Multiply": [
    "TheWeepingHouse/Runner"
  ],
  "TheWeepingHouse/ConfigurationsBuilder": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Screens/Achievements": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Frameworks/Full": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/GameEvent": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Shaders/Base": [
    "TheWeepingHouse/Runner",
    "TheWeepingHouse/Shaders/FlatColor",
    "TheWeepingHouse/Shaders/Multiply"
  ],
  "AllegroFlare/Screens/CharacterNameInput": [
    "TheWeepingHouse/Runner"
  ],
  "ReleaseInfo": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Elements/Backgrounds/ScreenCapture": [
    "TheWeepingHouse/Runner"
  ],
  "AllegroFlare/Elements/Backgrounds/Image": [
    "TheWeepingHouse/Runner"
  ]
}
</pre>
</body>