parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Runner"'


properties:


  - name: mode
    type: std::string
    init_with: '"production"'
    constructor_arg: true

  - name: framework
    type: AllegroFlare::Frameworks::Full*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true

  - name: opening_logos_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: title_screen
    type: AllegroFlare::Screens::TitleScreen
    init_with: '{}'

  - name: pause_screen
    type: AllegroFlare::Screens::PauseScreen
    init_with: '{}'

  - name: new_game_intro_storyboard_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: gameplay_screen
    type: AllegroFlare::Prototypes::FixedRoom2D::Screen
    init_with: '{}'

  - name: achievements_screen
    type: AllegroFlare::Screens::Achievements
    init_with: '{}'

  - name: credits_screen
    type: AllegroFlare::Screens::Storyboard*
    init_with: nullptr

  - name: room_shader_color
    type: AllegroFlare::Color
    init_with: AllegroFlare::Color::White
    constructor_arg: true

  - name: room_shader
    type: AllegroFlare::Shader*
    init_with: nullptr

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ (!initialized), framework ]
    body: |
      // setup the bin paths
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();
      AllegroFlare::Achievements &achievements = framework->get_achievements_ref();


      // setup the achievements
      achievements.set_achievements({
         { "free_seat", { new AllegroFlare::Achievement("Free Seat at the Concert"), false, false } },
         { "start_the_game", { new AllegroFlare::Achievement("In Da House"), false, false } },
         { "do_thing", { new AllegroFlare::Achievement("Save the Zoo", "Will unhide when achieved"), false, false } },
         { "a_hidden_gem2", { new AllegroFlare::Achievement("Hidden Gem", "Will unhide when achieved"), false, true } },
         { "an_unlocked_gem", { new AllegroFlare::Achievement("Unlocked Hidden Gem", "Will unhide when achieved"), true, true } },
      });


      // setup the shader
      TheWeepingHouse::Shaders::Multiply *multiply_shader = new TheWeepingHouse::Shaders::Multiply();
      multiply_shader->initialize();
      //room_shader_color = AllegroFlare::Color(0.2, 0.2, 0.48, 1.0);
      multiply_shader->set_tint(room_shader_color.to_al());
      multiply_shader->set_tint_intensity(0.5);
      room_shader = multiply_shader;


      // setup our helper factories
      AllegroFlare::StoryboardFactory storyboard_factory(&font_bin, &event_emitter);


      // create the opening logos storyboard screen
      opening_logos_storyboard_screen = storyboard_factory.create_images_storyboard_screen({
            bitmap_bin["allegro5-logo-gray-med.png"],
            bitmap_bin["allegro-flare-alt-logo-01-med.png"],
            bitmap_bin["clubcatt-med-01.png"],
            bitmap_bin["tinslogo06.gif"],
            nullptr,
         });
      opening_logos_storyboard_screen->set_game_event_name_to_emit_after_completing("start_title_screen");
      framework->register_screen("opening_logos_storyboard_screen", opening_logos_storyboard_screen);



      // pre-load the audio controller
      audio_controller.set_and_load_sound_effect_elements({
        { "menu-click-01.wav", { "menu-click-01.wav", false } },
        { "door-locked-hall", { "door-locked-hall-03.ogg", false } },
        { "doorbell", { "doorbell-02.ogg", false } },
      });
      audio_controller.set_and_load_music_track_elements({
        { "rain_on_roof", { "indoor-rain-looped-03.ogg", true } },
        { "heavy_outdoor_rain", { "heavy-rain-looped-01.ogg", true } },
        //{ "file_example_OOG_1MG.ogg", { "file_example_OOG_1MG.ogg", true } },
        { "rain_while_in_basement", { "rain_while_in_basement.ogg", true } },
      });


      // setup the title screen
      title_screen.set_font_bin(&font_bin);
      title_screen.set_bitmap_bin(&bitmap_bin);
      title_screen.set_title_text("");
      //title_screen.set_title_bitmap_name("the_weeping_house_title-02b.png");
      title_screen.set_background_bitmap_name("the_weeping_house_title-02c.png");
      //title_screen.set_menu_selector_color(AllegroFlare::Color(0x302e46).to_al());
      //title_screen.set_menu_selected_text_color(AllegroFlare::Color(0xffffff).to_al());
      //title_screen.set_menu_text_color(AllegroFlare::Color(0xffffff).to_al());
      //title_screen.set_font_name("Benne-Regular.ttf");
      title_screen.set_event_emitter(&event_emitter);
      //title_screen.set_font_name("Inter-Medium.ttf");
      title_screen.set_menu_font_size(-40);
      title_screen.set_menu_position_y(1080/32*19+10);
      title_screen.set_copyright_text("Copyright 2022 - Mark Oates\nCLUBCATT Games - www.clubcatt.com\n");
      title_screen.set_copyright_text_color(AllegroFlare::Color(0x72aedd, 0.4).to_al());
      title_screen.set_copyright_font_size(-26);
      title_screen.set_menu_options({
         { "Start New Game", "start_new_game" },
         { "Achievements", "start_achievements_screen" },
         { "Credits", "start_credits_screen" },
         { "Quit", "exit_game" },
      });
      framework->register_screen("title_screen", &title_screen);



      // setup the achievements screen
      achievements_screen.set_font_bin(&font_bin);
      achievements_screen.set_event_emitter(&event_emitter);
      achievements_screen.set_achievements(&achievements);
      achievements_screen.initialize();
      framework->register_screen("achievements_screen", &achievements_screen);



      // setup the pause screen
      pause_screen.set_font_bin(&font_bin);
      pause_screen.set_bitmap_bin(&bitmap_bin);
      pause_screen.set_event_emitter(&event_emitter);
      pause_screen.set_menu_options({
         { "Resume", "unpause_game" },
         { "Quit", "start_title_screen" },
      });
      framework->register_screen("pause_screen", &pause_screen);



      // setup the intro storyboards screen
      new_game_intro_storyboard_screen = storyboard_factory.create_advancing_text_storyboard_screen({
            "I found myself here.",
            "Stranded in a rainstorm.",
            "With my car broken down.",
            "No cell reception.",
            "Unbelievable.",
            "This storm is bad, too. They were talking about it on the radio.",
            "I don't know if being in the car is even safe.",
            "I need to find shelter.",
            "It looks like there's a light just up in the woods.",
            "Maybe I can find luck there.",
         });
      new_game_intro_storyboard_screen->set_event_emitter(&event_emitter);
      new_game_intro_storyboard_screen->set_game_event_name_to_emit_after_completing("activate_gameplay_screen");
      framework->register_screen("new_game_intro_storyboard_screen", new_game_intro_storyboard_screen);



      // setup the gameplay screen
      gameplay_screen.set_bitmap_bin(&bitmap_bin);
      gameplay_screen.set_font_bin(&font_bin);
      gameplay_screen.set_event_emitter(&event_emitter);
      gameplay_screen.set_audio_controller(&audio_controller);
      gameplay_screen.get_fixed_room_2d_ref().set_room_shader(room_shader);
      gameplay_screen.initialize();
      framework->register_screen("gameplay_screen", &gameplay_screen);



      // setup the credits screen
      credits_screen = storyboard_factory.create_advancing_text_storyboard_screen({
            "Thank you to amarillion for running TINS.",
            "Thanks to all the members of allegro.cc for their participation in the community, "
               "which had a huge impact in my development as a programmer.",
            "Thank you to Elias and SiegeLord for their continued dedication to Allegro.",
            "Thank you to Matthew Leverton for creating allegro.cc",
            "Thank you to Shawn Hargreaves for creating the first version of Allegro in the 90s.",
            "And thank you for playing.",
         });
      credits_screen->set_event_emitter(&event_emitter);
      credits_screen->set_game_event_name_to_emit_after_completing("finished_credits_screen");
      framework->register_screen("credits_screen", credits_screen);



      return;
    body_dependency_symbols:
      - AllegroFlare::Prototypes::FixedRoom2D::Configuration
      - TheWeepingHouse::Configurations::Primary
      - AllegroFlare::StoryboardFactory
      - TheWeepingHouse::Shaders::Multiply


  - name: start_new_game
    body: |
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();

      AllegroFlare::Prototypes::FixedRoom2D::Configuration configuration = get_builder_configuration();

      gameplay_screen.load_game_configuration_and_start(configuration);

      framework->activate_screen("new_game_intro_storyboard_screen"); // <-- probably will want to add this
      framework->get_event_emitter_ref().emit_play_music_track_event("heavy_outdoor_rain");
      //framework->activate_screen("gameplay_screen");
      return;


  - name: get_initial_configuration
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    body: |
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();

      return TheWeepingHouse::Configurations::Initial::build(
            &bitmap_bin,
            &font_bin,
            &event_emitter,
            &gameplay_screen.get_fixed_room_2d_ref().get_entity_collection_helper_ref()
         );
    body_dependency_symbols:
      - TheWeepingHouse::Configurations::Initial


  - name: get_configuration
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    body: |
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();

      TheWeepingHouse::Configurations::Primary primary;

      primary.set_bitmap_bin(&bitmap_bin);
      primary.set_font_bin(&font_bin);
      primary.set_event_emitter(&event_emitter);
      primary.set_entity_collection_helper__this_is_a_hack(
         &gameplay_screen.get_fixed_room_2d_ref().get_entity_collection_helper_ref()
      );

      return primary.build();
    body_dependency_symbols:
      - TheWeepingHouse::Configurations::Primary


  - name: get_builder_configuration
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    body: |
      AllegroFlare::FontBin &font_bin = framework->get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework->get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework->get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework->get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework->get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework->get_audio_controller_ref();

      TheWeepingHouse::ConfigurationsBuilder configurations_builder;

      configurations_builder.set_bitmap_bin(&bitmap_bin);
      configurations_builder.set_font_bin(&font_bin);
      configurations_builder.set_event_emitter(&event_emitter);
      configurations_builder.set_entity_collection_helper__this_is_a_hack(
         &gameplay_screen.get_fixed_room_2d_ref().get_entity_collection_helper_ref()
      );

      return configurations_builder.build();
    body_dependency_symbols:
      - TheWeepingHouse::ConfigurationsBuilder


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ ev, event_emitter ]
    body: |
      std::string event_name = ev->get_type();
      static std::string screen_before_achievements = "title_screen";

      if (event_name == "initialize")
      {
         if (mode == "production")
         {
            event_emitter->emit_game_event(AllegroFlare::GameEvent("start_opening_logos_storyboard_screen"));
         }
         else
         {
            //event_emitter->emit_game_event(AllegroFlare::GameEvent("start_new_game"));
            event_emitter->emit_game_event(AllegroFlare::GameEvent("start_title_screen"));
         }
      }
      if (event_name == "start_opening_logos_storyboard_screen")
      {
         framework->activate_screen("opening_logos_storyboard_screen");
         //event_emitter->emit_post_unlocked_achievement_notification_event("See the logos");
      }
      if (event_name == "achievements_screen_finished")
      {
         framework->activate_screen(screen_before_achievements);
      }
      if (event_name == "start_achievements_screen")
      {
         //screen_before_achievements = 
         framework->activate_screen("achievements_screen");
      }
      if (event_name == "start_title_screen")
      {
         framework->activate_screen("title_screen");
         //event_emitter->emit_play_music_track_event("file_example_OOG_1MG.ogg");
         event_emitter->emit_play_music_track_event("heavy_outdoor_rain");

         // TODO: make this an event_emitter->emit_unlock_achievement_event();
         event_emitter->emit_event(ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT, intptr_t(new std::string("free_seat")));
         //event_emitter->emit_unlock_achievement_event("view_the_title");
         //event_emitter->emit_post_unlocked_achievement_notification_event("Take the title");
      }
      if (event_name == "start_credits_screen")
      {
         framework->activate_screen("credits_screen");
      }
      if (event_name == "activate_gameplay_screen")
      {
         framework->activate_screen("gameplay_screen");
         event_emitter->emit_event(ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT, intptr_t(new std::string("start_the_game")));
      }
      if (event_name == "start_new_game")
      {
         start_new_game();
         //event_emitter->emit_post_unlocked_achievement_notification_event("Start the game");
      }
      if (event_name == "finished_credits_screen")
      {
         framework->activate_screen("title_screen");
      }
      if (event_name == "exit_game")
      {
         event_emitter->emit_exit_game_event();
      }
      if (event_name == "pause_game")
      {
         framework->activate_screen("pause_screen");
      }
      if (event_name == "unpause_game")
      {
         framework->activate_screen("gameplay_screen");
      }
      return;
    body_dependency_symbols:
      - ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT


  - name: run
    parameters:
      - name: mode
        type: std::string
        default_argument: '"production"'
    static: true
    body: |
      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      //framework.disable_escape_key_will_shutdown();
      framework.initialize();

      AllegroFlare::FontBin &font_bin = framework.get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework.get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework.get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework.get_model_bin_ref();

      if (mode == "test")
      {
         font_bin.set_full_path("/Users/markoates/Repos/TheWeepingHouse/bin/programs/data/fonts");
         bitmap_bin.set_full_path("/Users/markoates/Repos/TheWeepingHouse/bin/programs/data/bitmaps");
         sample_bin.set_full_path("/Users/markoates/Repos/TheWeepingHouse/bin/programs/data/samples");
         model_bin.set_full_path("/Users/markoates/Repos/TheWeepingHouse/bin/programs/data/models");
      }

      Runner runner(mode, &framework, &framework.get_event_emitter_ref());
      runner.initialize();
      framework.register_screen("runner", &runner);

      framework.run_loop();

      return;


dependencies:


  - symbol: ALLEGRO_FLARE_EVENT_UNLOCK_ACHIEVEMENT
    headers: [ AllegroFlare/EventNames.hpp ]
  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Screens::TitleScreen
    headers: [ AllegroFlare/Screens/TitleScreen.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard*
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::StoryboardFactory
    headers: [ AllegroFlare/StoryboardFactory.hpp ]
  - symbol: AllegroFlare::Screens::GameWonScreen
    headers: [ AllegroFlare/Screens/GameWonScreen.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Screen
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Screen.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: TheWeepingHouse::Configurations::Initial
    headers: [ TheWeepingHouse/Configurations/Initial.hpp ]
  - symbol: TheWeepingHouse::Configurations::Primary
    headers: [ TheWeepingHouse/Configurations/Primary.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: TheWeepingHouse::Shaders::FlatColor
    headers: [ TheWeepingHouse/Shaders/FlatColor.hpp ]
  - symbol: TheWeepingHouse::Shaders::Multiply
    headers: [ TheWeepingHouse/Shaders/Multiply.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: TheWeepingHouse::ConfigurationsBuilder
    headers: [ TheWeepingHouse/ConfigurationsBuilder.hpp ]
  - symbol: AllegroFlare::Screens::Achievements
    headers: [ AllegroFlare/Screens/Achievements.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Frameworks::Full
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::Shader
    headers: [ AllegroFlare/Shader.hpp ]

