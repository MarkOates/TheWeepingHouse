properties:


  - name: filename
    type: std::string
    init_with: '"filename-not-set.tmj"'
    constructor_arg: true

  - name: num_columns
    type: int
    init_with: 0

  - name: num_rows
    type: int
    init_with: 0

  - name: tile_width
    type: int
    init_with: 0

  - name: tile_height
    type: int
    init_with: 0

  - name: objects
    type: TheWeepingHouse::ConfigurationTMJLoaderElements::Object
    init_with: ''

  - name: loaded
    type: bool
    init_with: false


functions:


  - name: load
    type: bool
    guards: [ (!loaded) ]
    body: |
      if (!TheWeepingHouse::FileExistenceChecker(filename).exists())
      {
         std::cout << "[TheWeepingHouse::ConfigurationTMJLoader::load]: ERROR: "
                   << "Trying to load the file \"" << filename << "\" but it does not exist."
                   << std::endl;
      }


      // load and validate the json
      std::ifstream i(filename);
      nlohmann::json j;
      try
      {
         i >> j;
      }
      catch (const std::exception& e)
      {
         i.close();
         std::stringstream error_message;
         error_message << "[ConfigurationTMJLoader::load]: ERROR: the file \"" << filename << "\" appears to have"
                       << " malformed JSON. The following error was thrown by nlohmann::json: \""
                       << e.what() << "\"";
         throw std::runtime_error(error_message.str());
      }


      // extract the dimentions
      num_columns = j["width"]; // get width
      num_rows = j["height"]; // get height
      tile_width = j["tilewidth"]; // get width
      tile_height = j["tileheight"]; // get height


      // validate the object layer
      bool object_tilelayer_type_found = false;
      nlohmann::json object_tilelayer;
      for (auto &layer : j["layers"].items())
      {
         if (layer.value()["type"] == "objectgroup" && layer.value()["name"] == "primary_object_layer")
         {
            object_tilelayer = layer.value();
            object_tilelayer_type_found = true;
            break;
         }
      }
      if (!object_tilelayer_type_found)
      {
         std::stringstream error_message;
         error_message << "TMJMeshLoader: error: collision_tilelayer type not found. Expecting a layer of type "
                       << "\"tilelayer\" that also has a \"name\" property of \"primary_object_layer\". Note that only "
                       << "the following layers present: \"" << std::endl;
         int layer_num = 0;
         for (auto &layer : j["layers"].items())
         {
            layer_num++;
            error_message << "  - layer " << layer_num << ":" << std::endl;
            error_message << "    - type: \"" << layer.value()["type"] << "\"" << std::endl;
            error_message << "    - name: \"" << layer.value()["name"] << "\"" << std::endl;
         }
         throw std::runtime_error(error_message.str());
      }

      // TODO validate "objects" property in the object_tilelayer;
      nlohmann::json objects_as_json = object_tilelayer["objects"]; //.get<std::vector<int>>();


      // extract the objects
      for (auto &object_as_json : objects_as_json.items())
      {
         nlohmann::json values = object_as_json.value();
         TheWeepingHouse::ConfigurationTMJLoaderElements::Object result_object(
            values["name"].get<std::string>(),
            values["x"].get<float>(),
            values["y"].get<float>(),
            values["width"].get<float>(),
            values["height"].get<float>()
         );

         //objects.push_back(result_object);
      }




      loaded = true;

      return true;
    body_dependency_symbols:
      - std::cout
      - std::ifstream
      - nlohmann::json
      - TheWeepingHouse::FileExistenceChecker
      - TheWeepingHouse::ConfigurationTMJLoaderElements::Object


  - name: get_num_columns
    type: int
    guards: [ loaded ]
    body: |
      return num_columns;


  - name: get_num_rows
    type: int
    guards: [ loaded ]
    body: |
      return num_rows;


  - name: get_tile_width
    type: int
    guards: [ loaded ]
    body: |
      return tile_width;


  - name: get_tile_height
    type: int
    guards: [ loaded ]
    body: |
      return tile_height;



dependencies:


  - symbol: std::ifstream
    headers: [ fstream ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: TheWeepingHouse::FileExistenceChecker
    headers: [ TheWeepingHouse/FileExistenceChecker.hpp ]
  - symbol: TheWeepingHouse::ConfigurationTMJLoaderElements::Object
    headers: [ TheWeepingHouse/ConfigurationTMJLoaderElements/Object.hpp ]


