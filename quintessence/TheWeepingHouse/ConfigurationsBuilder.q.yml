properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: entity_collection_helper__this_is_a_hack
    type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*
    init_with: nullptr
    constructor_arg: true
    setter: false

  - name: result_configuration
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    init_with: ''
    getter: explicit
    setter: false

  - name: built
    type: bool
    init_with: false

  - name: inventory_index
    type: AllegroFlare::InventoryIndex&
    init_with: result_configuration.get_inventory_index_ref()

  - name: af_inventory
    type: AllegroFlare::Inventory&
    init_with: result_configuration.get_af_inventory_ref()

  - name: flags
    type: AllegroFlare::Inventory&
    init_with: result_configuration.get_flags_ref()

  - name: entity_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>&
    init_with: result_configuration.get_entity_dictionary_ref()
    getter: true

  - name: room_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>&
    init_with: result_configuration.get_room_dictionary_ref()
    getter: true

  - name: entity_room_associations
    type: std::map<std::string, std::string>&
    init_with: result_configuration.get_entity_room_associations_ref()
    getter: true

  - name: script_dictionary
    type: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>&
    init_with: result_configuration.get_script_dictionary_ref()
    getter: true

  - name: starting_in_room_identifier
    type: std::string&
    init_with: result_configuration.get_starting_in_room_identifier_ref()

  - name: room_factory
    type: AllegroFlare::Prototypes::FixedRoom2D::RoomFactory
    init_with: 'bitmap_bin, font_bin, event_emitter, entity_collection_helper__this_is_a_hack'

  - name: entity_factory
    type: TheWeepingHouse::EntityFactory
    init_with: 'bitmap_bin'


functions:


  - name: you_build
    body: |

      const std::string FRONT_PORCH = "front_porch";
      const std::string FRONT_HALLWAY = "front_hallway";
      const std::string MAIN_HALLWAY = "main_hallway";
      const std::string FIRST_FLOOR_STORAGE_ROOM = "first_floor_storage_room";
      const std::string BACK_PORCH = "back_porch";


      const std::string FRONT_PORCH_DOOR = "front_porch_door";



      //TheWeepingHouse::EntityFactory entity_factory(bitmap_bin);
      entity_factory.set_hide_hitspots(true);


      inventory_index = AllegroFlare::InventoryIndex::build_placeholder_inventory_index();

      af_inventory.add_item(1);
      af_inventory.add_item(4);
      af_inventory.add_item(3);

      entity_dictionary = {
         { "door1", entity_factory.create_rectangle_hitspot(1725, 440, 60, 350, "Door 1", "observe_door1") },
         { "door2", entity_factory.create_rectangle_hitspot(115, 440, 60, 350, "Door 2", "observe_door2") },
         { FRONT_PORCH_DOOR, entity_factory.create_rectangle_hitspot(1725, 440, 60, 350, "Door 2", "observe_front_porch_door") },
         { "wall_art", entity_factory.create_ellipse_hitspot(1150, 450, 60, 60, "Wall Art", "observe_wall_art") },
      };

      entity_room_associations = {
         { FRONT_PORCH_DOOR, FRONT_PORCH },

         { "door1", FRONT_HALLWAY },
         { "wall_art", FRONT_HALLWAY },

         { "door2", MAIN_HALLWAY },
      };


      script_dictionary = {
         { "observe_front_porch_door", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: Oh wow, it's unlocked.  I'm going inside.",
               "ENTER_ROOM: " + FRONT_HALLWAY,
         })},
         { "observe_door1", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: Just a regular door. | I'm going to step through it.",
               "ENTER_ROOM: " + MAIN_HALLWAY,
         })},
         { "observe_door2", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: A regular door. | I'll go in.",
               "ENTER_ROOM: " + FRONT_HALLWAY,
         })},
         { "collect_keys", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "COLLECT: keys"
         })},
         { "observe_wall_art", AllegroFlare::Prototypes::FixedRoom2D::Script({
               "DIALOG: That's some interesting art on the wall.  I wonder what it's for.",
         })},
      };


      assemble_room(FRONT_PORCH, "What a nice place... but it doesn't look very invnting.  "
                                 "I'd better see if I can get inside.");
      assemble_room(FRONT_HALLWAY, "This is a pretty dark room. | I'd better see if I can get inside.");
      assemble_room(MAIN_HALLWAY, "This is a pretty dark room. | It's kinda hard to see anything, to be honest.");
      assemble_room(FIRST_FLOOR_STORAGE_ROOM, "Looks like a little room for storage.  There are some boxes here.");
      assemble_room(BACK_PORCH, "It sure is nice to have a place out of hte rain for now.");



      starting_in_room_identifier = FRONT_PORCH;
      return;


  - name: get_result_configuration
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    guards: [ built ]
    body: |
      return result_configuration;


  - name: set_start_room
    parameters:
      - name: room_name
        type: std::string
        default_argument: '"[unset-room_name]"'
    body: |
      starting_in_room_identifier = room_name;
      return;


  - name: build
    type: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    guards: [ bitmap_bin, font_bin, event_emitter, entity_collection_helper__this_is_a_hack ]
    body: |
      if (built) return result_configuration;
      you_build();
      built = true;
      return result_configuration;


  - name: assemble_room
    type: bool
    parameters:
      - name: room_name
        type: std::string
        default_argument: '"[unset-room_name]"'
      - name: observe_script_text
        type: std::string
        default_argument: '"[unset-background_bitmap_identifier]"'
    guards: [ (!room_exists(room_name)) ]
    body: |
      std::string generated_script_name = "observe_" + room_name;
      std::string generated_background_entity_name = room_name + "_bg";
      std::string expected_background_bitmap_name = "room_" + room_name + ".png";

      // create the room
      room_dictionary[room_name] = room_factory.create_room();

      // create the background entity
      // TODO: check if it exists first
      entity_dictionary[generated_background_entity_name] = 
         entity_factory.create_background(expected_background_bitmap_name, generated_script_name);

      // add the association for the background entity and the room
      // TODO: check if an association already exists for this entity
      entity_room_associations[generated_background_entity_name] = room_name;

      // create the "observe" script for the background entity
      // TODO: check if the script already exists
      // TODO: validate that the observe_script_text contains no newlines
      script_dictionary[generated_script_name] =
         AllegroFlare::Prototypes::FixedRoom2D::Script({ "DIALOG: " + observe_script_text });
     
      return true;


  - name: add_script
    parameters:
      - name: script_name
        type: std::string
        default_argument: '"[unset-script_name]"'
      - name: script_lines
        type: std::vector<std::string>
        default_argument: '{"[unset-script_lines]"}'
    guards: [ (!script_exists(script_name)) ]
    body: |
      script_dictionary[script_name] = AllegroFlare::Prototypes::FixedRoom2D::Script(script_lines);
      return;


  - name: room_exists
    type: bool
    parameters:
      - name: room_name
        type: std::string
        default_argument: '"[unset-room_name]"'
    body: |
      return (room_dictionary.count(room_name) > 0);


  - name: script_exists
    type: bool
    parameters:
      - name: script_name
        type: std::string
        default_argument: '"[unset-script_name]"'
    body: |
      return (script_dictionary.count(script_name) > 0);


  - name: entity_exists
    type: bool
    parameters:
      - name: entity_name
        type: std::string
        default_argument: '"[unset-entity_name]"'
    body: |
      return (entity_dictionary.count(entity_name) > 0);


  - name: entity_room_association_exists
    type: bool
    parameters:
      - name: entity_name
        type: std::string
        default_argument: '"[unset-entity_name]"'
      - name: room_name
        type: std::string
        default_argument: '"[unset-entity_name]"'
    body: |
      return (entity_room_associations.count(entity_name) > 0) && entity_room_associations[entity_name] == room_name;


  - name: set_font_bin
    parameters:
      - name: font_bin
        type: AllegroFlare::FontBin*
        default_argument: nullptr
    guards: [ (!built) ]
    body: |
      room_factory.set_font_bin(font_bin);
      this->font_bin = font_bin;
      return;


  - name: set_bitmap_bin
    parameters:
      - name: bitmap_bin
        type: AllegroFlare::BitmapBin*
        default_argument: nullptr
    guards: [ (!built) ]
    body: |
      room_factory.set_bitmap_bin(bitmap_bin);
      entity_factory.set_bitmap_bin(bitmap_bin);
      this->bitmap_bin = bitmap_bin;
      return;


  - name: set_event_emitter
    parameters:
      - name: event_emitter
        type: AllegroFlare::EventEmitter*
        default_argument: nullptr
    guards: [ (!built) ]
    body: |
      room_factory.set_event_emitter(event_emitter);
      this->event_emitter = event_emitter;
      return;


  - name: set_entity_collection_helper__this_is_a_hack
    parameters:
      - name: entity_collection_helper__this_is_a_hack
        type: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*
        default_argument: nullptr
    guards: [ (!built) ]
    body: |
      room_factory.set_entity_collection_helper(entity_collection_helper__this_is_a_hack);
      this->entity_collection_helper__this_is_a_hack = entity_collection_helper__this_is_a_hack;
      return;


dependencies:


  - symbol: AllegroFlare::InventoryIndex&
    headers: [ AllegroFlare/InventoryIndex.hpp ]
  - symbol: AllegroFlare::Inventory&
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>&
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>&
    headers: [ map, string, AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>&
    headers: [ map, AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: std::map<std::string, std::string>&
    headers: [ map, string ]
  - symbol: std::string&
    headers: [ string ]
  - symbol: AllegroFlare::Inventory*
    headers: [ AllegroFlare/Inventory.hpp ]
  - symbol: AllegroFlare::InventoryIndex*
    headers: [ AllegroFlare/InventoryIndex.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Entities::Base*>*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Entities/Base.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Room*>*
    headers: [ map, string, AllegroFlare/Prototypes/FixedRoom2D/Room.hpp ]
  - symbol: std::map<std::string, AllegroFlare::Prototypes::FixedRoom2D::Script>*
    headers: [ map, AllegroFlare/Prototypes/FixedRoom2D/Script.hpp ]
  - symbol: std::map<std::string, std::string>*
    headers: [ map, string ]
  - symbol: TheWeepingHouse::EntityFactory
    headers: [ TheWeepingHouse/EntityFactory.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::RoomFactory
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/RoomFactory.hpp ]
  - symbol: AllegroFlare::BitmapBin*
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::Shader*
    headers: [ AllegroFlare/Shader.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::EntityCollectionHelper*
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/EntityCollectionHelper.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Configuration
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Configuration.hpp ]


